$composer create-project laravel/laravel --prefer-dist tdd-laravel

$composer require laravel/jetstream
$php artisan jetstream:install livewire

$npm install or $npm run dev

+-----  in config/jetstream.php ----+
Features::profilePhotos() #uncomment for profile user with photos

php artisan make:test Models/Usertest --unit


+-----  add in UserTest.php ----+
use App\Models\User;
use Illuminate\Database\Eloquent\Collection;
use PHPUnit\Framework\TestCase;

class UserTest extends TestCase
{
	public function test_has_many_repositories()
	{
		$user = new User;
		$this->assertInstanceOf(Collection::class, $user->repositories);
	}
}

$php artisan make:model Repository -mf


+-----  add in Models/User.php ----+
		public function  repositories() {
			return $this->hasMany(Repository::class)
		}


+-----------------------+  
|  modify in UserTest.php  |
+-----------------------+
use PHPUnit\Framework\TestCase;  --> Tests/TestCase;

$php artisan make:test Models/RepositoryTest --unit

+-----------------------------+  
|  add in RepositoryTest.php  |
+-----------------------------+
use Tests\TestCase;

class RepositoryTest extends TestCase
{
    public function test_belongs_to_user()
    {
			$repository = Repository::factory()->create();

			$this->assertInstanceOf(User::class, $repository->user);
    }
}

+-------------------------+  
|  add in Repository.php  |
+-------------------------+
	public function user()
	{
		return $this->belongsTo(User::class);
	}


+-----------------------------------+  
|  modify in RepositoryFactory.php  |
+-----------------------------------+
    public function definition()
    {
        return [
					'user_id' => User::factory(),
        ];
    }

+-----------------------------------------+  
|  modify in create_repository_table.php  |
+-----------------------------------------+
	$table->unsignedBigInteger('user_id');
	$table->foreign('user_id')->references('id')->on('users');

+----------------------------+  
|  uncomment in phpunit.xml  |
+----------------------------+  
		<server name="DB_CONNECTION" value="sqlite"/>
		<server name="DB_DATABASE" value=":memory:"/>

+------------------+  
|  modify in .env  |
+------------------+  
DB_DATABASE=tdd


+--------------------------------+  
|  modify in RepositoryTest.php  |
+--------------------------------+  
use Illuminate\Foundation\Testing\RefreshDatabase;

class RepositoryTest extends TestCase
{
	use RefreshDatabase;
	.
	.

$php artisan make:test Http/Controllers/RepositoryControllerTest

$php artisan make:controller RepositoryController

+------------------------------------------+  
|  modify in RepositoryControllerTest.php  |
+------------------------------------------+  
	public function test_guest()
	{
		$this->get('repositories')->assertRedirect('login');
	}

+------------------+  
|  add in web.php  |
+------------------+  
Route::resource('repositories', App\Http\Controllers\RepositoryController::class)
	->middleware('auth');

+---------------------------------------+  
|  add in RepositoryControllerTest.php  |
+---------------------------------------+  
	public function test_store()
	{
		$data = [
			'url' => $this->faker->url,
			'description' => $this->faker->text,
		];

		$user = User::factory()->create();

		$this
			->actingAs($user)
			->post('repositories', $data)
			->assertRedirect('repositories');

		$this->assertDatabaseHas('repositories', $data);
	}


+-----------------------------------+  
|  add in RepositoryController.php  |
+-----------------------------------+  
	public function store(Request $request)
	{
		$request->user()->repositories()->create($request->all());

		return redirect()->route('repositories.index');
	}

+----------------------------------------+  
|  add in create_repositories_table.php  |
+----------------------------------------+  
		$table->string('url');
		$table->text('description');

+--------------------------------+  
|  add in RepositoryFactory.php  |
+--------------------------------+  
		'url' => $this->faker->url,
		'description' => $this->faker->text,

+-------------------------+  
|  add in Repository.php  |
+-------------------------+  
protected $fillable = [
	'url', 'description'
];

+---------------------------------------+  
|  add in RepositoryControllerTest.php  |
+---------------------------------------+  
use App\Models\Repository;
.
.
	public function test_update()
	{
		$repository = Repository::factory()->create();

		$data = [
			'url' => $this->faker->url,
			'description' => $this->faker->text,
		];

		$user = User::factory()->create();

		$this
			->actingAs($user)
			->post("repositories/$repository->id", $data)
			->assertRedirect("repositories/$repository->id");

		$this->assertDatabaseHas('repositories', $data);
	}

+-----------------------------------+  
|  add in RepositoryController.php  |
+-----------------------------------+  
use App\Models\Repository;
.
.
	public function update(Request $request, Repository $repository)
	{
		$repository->update($request->all());

		return redirect()->route('repositories.edit', $repository);
	}

+---------------------------------------+  
|  add in RepositoryControllerTest.php  |
+---------------------------------------+  
	public function test_validate_store()
	{
		$user = User::factory()->create();

		$this
			->actingAs($user)
			->post('repositories', [])
			->assertStatus(302)
			->assertSessionHasErrors(['url', 'description']);

		$this->assertDatabaseHas('repositories', $data);
	}

	public function test_validate_update()
	{
		$repository = Repository::factory()->create();

		$user = User::factory()->create();

		$this->actingAs($user)
			 ->put("repositories/$repository->id", [])
			->assertStatus(302)
			->assertSessionHasErrors(['url', 'description']);
	}

	public function test_destroy()
	{
		$repository = Repository::factory()->create();

		$user = User::factory()->create();

		$this->actingAs($user)
			 ->delete("repositories/$repository->id")
			 ->assertRedirect("repositories");

		$this->assertDatabaseMissing('repositories', [
			'id' => $repository->id,
			'url' => $repository->url,
			'description' => $repository->description,
		]);
	}

+-----------------------------------+  
|  add in RepositoryController.php  |
+-----------------------------------+  
	public function destroy(Repository $repository)
	{
		$repository->delete();

		return redirect()->route('repositories.index');
	}

+---------------------------------------+  
|  add in RepositoryControllerTest.php  |
+---------------------------------------+  
	public function test_update_policy()
	{
		$user = User::factory()->create();
		$repository = Repository::factory()->create();

		$data = [
			'url' => $this->faker->url,
			'description' => $this->faker->text,
		];


		$this->actingAs($user)
			 ->put("repositories/$repository->id", $data)
			 ->assertStatus(403);

	}

	public function test_destroy_policy()
	{
		$user = User::factory()->create();
		$repository = Repository::factory()->create(['user_id' => $user->id]);


		$this->actingAs($user)
			 ->delete("repositories/$repository->id")
			 ->assertRedirect("repositories");

		$this->assertDatabaseMissing('repositories', [
			'id' => $repository->id,
			'url' => $repository->url,
			'description' => $repository->description,
		]);
	}

+--------------------------------------+  
|  modify in RepositoryController.php  |
+--------------------------------------+  
	public function update(Request $request, Repository $repository)
	{
		$request->validate([
			'url' => 'required',
			'description' => 'required'
		]);

		if ($request->user()->id != $repository->user_id) abort(403);

		$repository->update($request->all());

		return redirect()->route('repositories.edit', $repository);
	}

	public function destroy(Request $request, Repository $repository)
	{
		if ($request->user()->id != $repository->user_id) abort(403);
		$repository->delete();

		return redirect()->route('repositories.index');
	}

+---------------------------------------+  
|  add in RepositoryControllerTest.php  |
+---------------------------------------+  
	public function test_index_empty()
	{
		Repository::factory()->create(); // user_id 1

		$user = User::factory()->create(); // id = 2

		$response = $this
			->actingAs($user)
			->get('repositories')
			->assertStatus(200)
			->assertSee('No hay repositorios creados');
	}

	public function test_index_with_data()
	{
		$user = User::factory()->create();
		$repository = Repository::factory()->create(['user_id' => $user->id]);


		$this
			->actingAs($user)
			->get('repositories')
			->assertStatus(200)
			->assertSee($repository->id)
			->assertSee($repository->url);
	}

+--------------------------------------+  
|  modify in RepositoryController.php  |
+--------------------------------------+  
	public function index(Request $request)
	{
		return view('repositories.index', [
			'repositories' => $request->user()->repositories,
		]);
	}


+-------------------------------------------------------+  
|  add in resources/views/repositories/index.blade.php  |
+-------------------------------------------------------+  
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Dashboard') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-xl sm:rounded-lg p-4">
							<table>
								<thead>
									<tr>
										<th>ID</th>
										<th>Enlace</th>
									</tr>
								</thead>
								<tbody>
									@forelse ($repositories as $repository)
										<tr>
											<td class="border px-4 py-2">{{ $repository->id }}</td>
											<td class="border px-4 py-2">{{ $repository->url }}</td>
										</tr>
									@empty
										<tr>
											<td colspan="2">No hay repositorios creados</td>
										</tr>
									@endforelse
								</tbody>
							</table>
            </div>
        </div>
    </div>
</x-app-layout>

+------------------------------------------+  
|  modify in RepositoryControllerTest.php  |
+------------------------------------------+
	public function test_show()
	{
		$user = User::factory()->create();
		$repository = Repository::factory()->create(['user_id' => $user->id]);

		$response = $this->actingAs($user)
			 ->get("repositories/$repository->id")
			 ->assertStatus(302);
	}

	public function test_show_policy()
	{
		$user = User::factory()->create();
		$repository = Repository::factory()->create();

		$this->actingAs($user)
			 ->get("repositories/$repository->id")
			 ->assertStatus(403);

	}

+--------------------------------------+  
|  modify in RepositoryController.php  |
+--------------------------------------+  
	public function show(Request $request, Repository $repository)
	{
		if ($request->user()->id != $repository->user_id) abort(403);

		return redirect()->route('repositories.show', compact('repository'));
	}


+-------------------------------------------------------+  
|  add in resources/views/repositories/show.blade.php  |
+-------------------------------------------------------+
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Profile') }}
        </h2>
    </x-slot>

    <div>
        <div class="max-w-7xl mx-auto py-10 sm:px-6 lg:px-8">
            @if (Laravel\Fortify\Features::canUpdateProfileInformation())
                @livewire('profile.update-profile-information-form')

                <x-jet-section-border />
            @endif

            @if (Laravel\Fortify\Features::enabled(Laravel\Fortify\Features::updatePasswords()))
                <div class="mt-10 sm:mt-0">
                    @livewire('profile.update-password-form')
                </div>

                <x-jet-section-border />
            @endif

            @if (Laravel\Fortify\Features::canManageTwoFactorAuthentication())
                <div class="mt-10 sm:mt-0">
                    @livewire('profile.two-factor-authentication-form')
                </div>

                <x-jet-section-border />
            @endif

            <div class="mt-10 sm:mt-0">
                @livewire('profile.logout-other-browser-sessions-form')
            </div>

            @if (Laravel\Jetstream\Jetstream::hasAccountDeletionFeatures())
                <x-jet-section-border />

                <div class="mt-10 sm:mt-0">
                    @livewire('profile.delete-user-form')
                </div>
            @endif
        </div>
    </div>
</x-app-layout>

+-------------------------------------------------------+  
|  add in resources/views/repositories/index.blade.php  |
+-------------------------------------------------------+  
							<table>
								<thead>
									<tr>
										<th>ID</th>
										<th>Enlace</th>
										<th>&nsbp;</th>
									</tr>
								</thead>
								<tbody>
									@forelse ($repositories as $repository)
										<tr>
											<td class="border px-4 py-2">{{ $repository->id }}</td>
											<td class="border px-4 py-2">{{ $repository->url }}</td>
											<td class="px-4 py-2">
												<a href="{{ route('repositories.show', $repository) }}">Ver</a>
											</td>
											<td class="px-4 py-2">
												<a href="{{ route('repositories.edit', $repository) }}">Editar</a>
											</td>
										</tr>
									@empty
										<tr>
											<td colspan="4">No hay repositorios creados</td>
										</tr>
									@endforelse
								</tbody>
							</table>


+---------------------------------------+  
|  add in RepositoryControllerTest.php  |
+---------------------------------------+
	public function test_edit()
	{
		$user = User::factory()->create();
		$repository = Repository::factory()->create(['user_id' => $user->id]);

		$response = $this->actingAs($user)
			 ->get("repositories/$repository->id/edit")
			 ->assertStatus(200)
		 	 ->assertSee($repository->url)
		 	 ->assertSee($repository->description);
	}

	public function test_edit_policy()
	{
		$user = User::factory()->create(); // id = 1
		$repository = Repository::factory()->create(); // user_id = 2

		$this->actingAs($user)
			 ->get("repositories/$repository->id/edit")
			 ->assertStatus(403);

	}

+-----------------------------------+  
|  add in RepositoryController.php  |
+-----------------------------------+
	public function edit(Request $request, Repository $repository)
	{
		if ($request->user()->id != $repository->user_id) abort(403);

		return view('repositories.edit', compact('repository'));
	}

+-------------------------------------------------------+  
|  add in resources/views/repositories/index.blade.php  |
+-------------------------------------------------------+  
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Dashboard') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-xl sm:rounded-lg p-4">
							<form action="{{ route('repositories.update', $repository) }}" method="POST" class="max-w-mg">
								@csrf
								@method('PUT')

								<label class="block font-medium text-sm text-gray-700">URL *</label>
								<input type="text" name="url" value="{{ $repository->url }}" class="form-input w-full rounded-md shadow-sm">

								<label class="block font-medium text-sm text-gray-700">Descripción *</label>
								<textarea type="text" name="description" class="form-input w-full rounded-md shadow-sm">{{ $repository->description }}</textarea>

								<hr class="my-4">

								<input type="submit" value="Editar" class="bg-blue-500 text-white font-bold py-2 px-4 rounded-md">

							</form>
						</div>
        </div>
    </div>
</x-app-layout>

+---------------------------------------+  
|  add in RepositoryControllerTest.php  |
+---------------------------------------+
	public function test_create()
	{
		$user = User::factory()->create();

		$this->actingAs($user)
			 ->get("repositories/create")
			 ->assertStatus(200);
	}

+-----------------------------------+  
|  add in RepositoryController.php  |
+-----------------------------------+
	public function create()
	{
		return view('repositories.create');
	}

+-------------------------------------------------------+  
|  add in resources/views/repositories/index.blade.php  |
+-------------------------------------------------------+
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Dashboard') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-xl sm:rounded-lg p-4">
							<form action="{{ route('repositories.store') }}" method="POST" class="max-w-mg">
								@csrf

								<label class="block font-medium text-sm text-gray-700">URL *</label>
								<input type="text" name="url"  class="form-input w-full rounded-md shadow-sm">

								<label class="block font-medium text-sm text-gray-700">Descripción *</label>
								<textarea type="text" name="description" class="form-input w-full rounded-md shadow-sm"></textarea>

								<hr class="my-4">

								<input type="submit" value="Guardar" class="bg-blue-500 text-white font-bold py-2 px-4 rounded-md">

							</form>
						</div>
        </div>
    </div>
</x-app-layout>

$php artisan make:test Http/Controllers/PageControllerTest

$php artisan make:controller PageController


+---------------------------------+  
|  add in PageControllerTest.php  |
+---------------------------------+
	use RefreshDatabase;

	public function test_home()
	{
		$repository = Repository::factory()->create();

		$response = $this
			->get('/')
			->assertStatus(200)
			->assertSee($repository->url);

	}

+---------------------------------+  
|  add in PageController.php  |
+---------------------------------+
use App\Models\Repository;
.
.
.
	public function home()
	{
		return view('home.index', [
			'repositories' => Repository::latest()->get(),
		]);
	}

+-----------------------------------------------+  
|  add in resources/views/home/index.blade.php  |
+-----------------------------------------------+  
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <title>Laravel</title>
				<link rel="stylesheet" href="{{ asset('css/app.css') }}">

    </head>
    <body class="bg-gray-200">
			@foreach($repositories as $repository)
        <h2>{{ $repository->url }}</h2>
        <p>{{ $repository->description }}</p>
			@endforeach
		</body>
</html>


// si el test no coore, intent $php artisan route:cache

+--------------------------------------------------+  
|  modify in resources/views/home/index.blade.php  |
+--------------------------------------------------+
    <body class="bg-gray-200">
			<ul class="max-w-lg bg-white border-r border-gray-300 shadow-xl">
				@foreach($repositories as $repository)
					<li class="flex items-center text-black p-2 hover:bg-gray-300">
						<img 
							src="{{ $reposiory->user->profile_photo_url }}" 
							alt=""
							class="w-12 h-12 rounded-full mr-2"
						>
						<div class="flex justify-between w-full">
							<div class="flex-1">
								<h2 class="text-sm font-semibold text-black">
									{{ $repository->url }}
								</h2>
								<p> {{ $repository->description }}</p>
							</div>
							<span class="text-xs font-medium text-gray-600">{{ $repository->created_at }}</span>
						</div>
					</li>
				@endforeach
			</ul>
		</body>


// create database with config in .env


+--------------------------------+  
|  modify in DatabaseSeeder.php  |
+--------------------------------+  
    public function run()
    {
			\App\Models\Repository::factory(40)->create();
    }



+-----------------------------------------------------+  
|  add in reosources/views/navigation-menu.blade.php  |
+-----------------------------------------------------+  
	<!-- Navigation Links -->
	<x-jet-responsive-nav-link href="{{ route('repositories.index') }}" :active="request()->routeIs('repositories*')">
			Repositories
	</x-jet-responsive-nav-link>
    <!-- Responsive Navigation Menu -->
            <x-jet-responsive-nav-link href="{{ route('repositories.index') }}" :active="request()->routeIs('repositories*')">
                Repositories
            </x-jet-responsive-nav-link>
